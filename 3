-- // Services
local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local GuiService = game:GetService("GuiService")
local RunService = game:GetService("RunService")

-- // Vars
local Heartbeat = RunService.Heartbeat  
local LocalPlayer = Players.LocalPlayer
local CurrentCamera = Workspace.CurrentCamera
local Mouse = LocalPlayer:GetMouse()

-- // Optimisation Vars
local Drawingnew = Drawing.new
local Color3fromRGB = Color3.fromRGB
local Vector2new = Vector2.new
local GetGuiInset = GuiService.GetGuiInset
local Randomnew = Random.new
local mathfloor = math.floor
local CharacterAdded = LocalPlayer.CharacterAdded
local CharacterAddedWait = CharacterAdded.Wait
local WorldToViewportPoint = CurrentCamera.WorldToViewportPoint
local RaycastParamsnew = RaycastParams.new
local EnumRaycastFilterTypeBlacklist = Enum.RaycastFilterType.Blacklist
local Raycast = Workspace.Raycast
local GetPlayers = Players.GetPlayers
local Instancenew = Instance.new
local IsDescendantOf = Instancenew("Part").IsDescendantOf
local FindFirstChildWhichIsA = Instancenew("Part").FindFirstChildWhichIsA
local FindFirstChild = Instancenew("Part").FindFirstChild
local tableremove = table.remove
local tableinsert = table.insert

-- // Silent Aim Vars
getgenv().Aiming = {
    Enabled = true,
    ShowFOV = true,
    FOV = 40,
    FOVSides = 16,
    FOVColour = Color3fromRGB(255, 255, 255),
    VisibleCheck = true,
    HitChance = 100,
    Selected = nil,
    SelectedPart = nil,
    TargetPart = {"Head", "HumanoidRootPart"},
    Ignored = {
        Players = {},
        Teams = {},
    }
}
local Aiming = getgenv().Aiming

-- // Create circle
local circle = Drawingnew("Circle")
circle.Transparency = 1
circle.Thickness = 2
circle.Color = Aiming.FOVColour
circle.Filled = false

-- // Update FOV Circle
function Aiming.UpdateFOV()
    circle.Visible = Aiming.ShowFOV
    circle.Radius = (Aiming.FOV * 3)
    circle.Position = Vector2new(Mouse.X, Mouse.Y + GetGuiInset(GuiService).Y)
    circle.NumSides = Aiming.FOVSides
end

-- // Calculate Chance
local function CalcChance(percentage)
    return mathfloor(Randomnew():NextNumber(0, 1) * 100) / 100 <= (percentage / 100)
end

-- // Check Visibility
function Aiming.IsPartVisible(Part, PartDescendant)
    local Character = LocalPlayer.Character or CharacterAddedWait(CharacterAdded)
    local Origin = CurrentCamera.CFrame.Position
    local _, OnScreen = WorldToViewportPoint(CurrentCamera, Part.Position)

    if OnScreen then
        local raycastParams = RaycastParamsnew()
        raycastParams.FilterType = EnumRaycastFilterTypeBlacklist
        raycastParams.FilterDescendantsInstances = {Character, CurrentCamera}

        local Result = Raycast(Workspace, Origin, Part.Position - Origin, raycastParams)
        if Result then
            local PartHit = Result.Instance
            return not PartHit or IsDescendantOf(PartHit, PartDescendant)
        end
    end

    return false
end

-- // Ignore player functions
function Aiming.IgnorePlayer(Player)
    local IgnoredPlayers = Aiming.Ignored.Players
    if not table.find(IgnoredPlayers, Player) then
        tableinsert(IgnoredPlayers, Player)
        return true
    end
    return false
end

function Aiming.UnIgnorePlayer(Player)
    local IgnoredPlayers = Aiming.Ignored.Players
    for i, IgnoredPlayer in ipairs(IgnoredPlayers) do
        if IgnoredPlayer == Player then
            tableremove(IgnoredPlayers, i)
            return true
        end
    end
    return false
end

-- // Get Closest Player to Cursor
function Aiming.GetClosestPlayerToCursor()
    local ClosestPlayer, ShortestDistance = nil, math.huge

    for _, Player in ipairs(GetPlayers(Players)) do
        if Player ~= LocalPlayer and Aiming.CheckHealth(Player) and not Aiming.IsIgnored(Player) then
            local Character = Aiming.Character(Player)
            if Character then
                local TargetPartTemp, _, _, Magnitude = Aiming.GetClosestTargetPartToCursor(Character)
                if TargetPartTemp and Magnitude < ShortestDistance and circle.Radius > Magnitude then
                    if Aiming.VisibleCheck and not Aiming.IsPartVisible(TargetPartTemp, Character) then continue end

                    ClosestPlayer = Player
                    ShortestDistance = Magnitude
                end
            end
        end
    end

    Aiming.Selected = ClosestPlayer
end

-- // Heartbeat Function
Heartbeat:Connect(function()
    Aiming.UpdateFOV()
    Aiming.GetClosestPlayerToCursor()
end)

-- // Return Aiming functions
return Aiming
